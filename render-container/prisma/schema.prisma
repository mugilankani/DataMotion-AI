datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model User {
    id                      String    @id @default(auto()) @map("_id") @db.ObjectId
    name                    String?
    email                   String?   @unique
    emailVerified           DateTime?
    image                   String?
    currentInferences       Int       @default(0)
    maxConcurrentInferences Int       @default(1)

    graphs   Graph[]   @relation("UserGraphs")
    projects Project[] @relation("UserProjects") // Relation to projects

    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    Account   Account[]
    Session   Session[]
}

model Project {
    id     String @id @default(auto()) @map("_id") @db.ObjectId
    name   String
    avatar String
    prompt String // The prompt related to the project
    userId String @db.ObjectId
    user   User   @relation("UserProjects", fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Graph {
    id        String @id @default(auto()) @map("_id") @db.ObjectId
    title     String
    jsonData  String // JSON structure for the graph
    graphCode String // Generated graph code
    type      String // Graph type (e.g., pie, bar)
    videoLink String
    status    Status

    userId String @db.ObjectId
    user   User   @relation("UserGraphs", fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

enum Status {
    RENDERING
    COMPLETED
}

model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.String
    access_token      String? @db.String
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.String
    session_state     String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String   @db.ObjectId
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationToken {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    identifier String
    token      String
    expires    DateTime

    @@unique([identifier, token])
}
